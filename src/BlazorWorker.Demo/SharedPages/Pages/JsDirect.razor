@inject JsDirectExample jsDirectExample

<div class="row">
    <div class="col-9 col-xs-12">
        <script src="_content/BlazorWorker.Demo.SharedPages/JsDirectExample.js"></script>
        <h1>JSDirect Calls</h1>

        Demonstrates how to receive messages from a dotnet worker on the main/ui js thread directly.
        Also demonstrates putting most of the logic in a separate class (JsDirectExample)
        <br />
        <br />
        <button disabled=@RunDisabled @onclick=OnClick class="btn btn-primary">Run test</button><br /><br />
        <br />
        <br />
        <div class="row">
            <div class="col-6 col-xs-12">
                <strong>JsDirect.razor Output:</strong>

                <hr />
                <pre>@output</pre>
            </div>
            <div class="col-6 col-xs-12">
                <strong>Main js Output:</strong>
                <hr />
                <pre id="jsDirectOutputElement" style="text-wrap: pretty"></pre>
            </div>
        </div>
        
    </div>
    <div class="col-3 col-xs-12">
        <GithubSource RelativePath="Pages/JsDirect.razor" />
    </div>
</div>
@code {
    string output;
    string RunDisabled => Running ? "disabled" : null;
    bool Running = false;

    protected override void OnInitialized()
    {
        jsDirectExample.LogHandler += (s, e) => log(e);
        output = "";
        base.OnInitialized();
    }

    public async Task OnClick(EventArgs _)
    {
        Running = true;
        try
        {
            await jsDirectExample.Execute();
        }
        catch (Exception e)
        {
            log($"Error = {e}");
        }
        finally
        {
            Running = false;
        }
    }

    void log(string logStr){
        output += $"{Environment.NewLine}{LogDate()} {logStr}";
        StateHasChanged();
    }

    private string LogDate()
    {
        return DateTime.Now.ToString("HH:mm:ss:fff");
    }
}
